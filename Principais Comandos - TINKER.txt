PRINCIPAIS COMANDOS - TINKER

O que é o TINKER?

	O Tinker permite que você interaja com todo o aplicativo Laravel na linha 
        de comando, incluindo o ORM Eloquent, tarefas, eventos e muito mais.	

	O Tinker é um console interativo do Laravel (um shell do PHP) usado para 
        a manipulação do banco através do acesso às classes do nosso projeto. 

	Com o Tinker é possível testar relacionamentos e queries no banco de dados
	usando os métodos nativos implementados pelo ActiveDiretory do Eloquent.


1 - Iniciar o Tinker
	
	php artisan tinker

2 - Sair do Tinker
	
	>>> quit

3 - Ex. Inserir um registro na tabela 'Produtos'
	
	>>> use \App\Produto  (Seleciona a classe)
	
	1ª FORMA: Criando um objeto da classe Produto

	>>> $produto = new Produto
	>>> $produto->name = 'Samsung'
	>>> $produto->save()

	ou 

	2ª FORMA: Usando o método estático 'create' da classe Produto

	>>> $produto = Produto::create(['name' => 'Acer'])  

        Obs.: Para usar desta forma é necessário criar o atributo 
              'fillable' passando as colunas acessíveis.

4 - Consultar TODOS os registros da tabela 'Produtos'

	>>> use \App\Produto  (Seleciona a classe)

	>>> Produto::all()

5 - Consultar registros específicos com o método FIND()
	
	Obs.: Por padrão o FIND consulta a chave primária chamada ID 
              (por isso que é necessário manter o padrão de nomenclatura da pk como 'id')

	>>> Produto::find(1)   (Recupera o produto com ID=1 ) 

	>>> Produto::find([1,2,3])  (Recupera os produtos com IDs = 1,2,3)

5 - Consultar registros com o método WHERE()

	Obs.: O WHERE() precisa receber o nome do campo de consulta e um valor.
              Opcionalmente pode ser passado um operador lógico.

	>>> Produto::where('name','Samsung')->get()         (Recupera o produto com name=Samsung) 

        >>> Produto::where('id','>',2)->get()               (Recupera todos os produtos com id > 2) 

	>>> Produto::whereBetween('id',[2,5])->get()        (Recupera todos os produtos no intervalo de ids entre 2 e 5) 

	>>> Produto::whereNotIn('id',[1,4])->get()          (Recupera todos os produtos que não possuam os ids 1 e 4) 

	Uso do LIKE:

	>>> Produto::where('name','like', '%sung')->get()   (Recupera todos os produtos com nome terminando em 'sung') 
		ou
	>>> $part_name = "sung";  (declara uma variável)
	>>> Produto::where('name','like', "% $part_name")->get()  (Obs.: A variável deve estar entre aspas duplas "")

        ENCADEAMENTO de CONSULTAS usando o WHERE (AND e OR)

	>>> Produto::where('id','>',2)->where('name','like', '%Dell')->get()    (Recupera todos os produtos com id > 2 'AND' que possuam 'Dell' no nome) 
	
	Obs.1: Neste caso, o segundo 'where' funciona como um 'AND' 
	Obs.2: É possível encadear vários 'where'
	
	>>> Produto::where('id','>',2)->orWhere('name','like', '%Dell')->get()    (Recupera todos os produtos com id > 2 'OR' que possuam 'Dell' no nome) 

	Obs.1: Neste caso, o segundo 'where' funciona como um 'OR' 

	AGRUPAMENTO de CONSULTAS usando FUNÇÃO

	Exemplo de consulta: (id > 1 and id < 4) and ( name='LG' or 'name' = 'Aplle')

        1ª parte (id > 1 and id < 4): 

		Produto::where( function($query) { 
				$query -> where('id','>',1)->where('id','<',4);
			})->get()

	2ª parte ( name='LG' or 'name' = 'Aplle'):

		Produto::where(function($query) { 
				$query -> where('name','LG')->orWhere('name','Aplle');
			})->get()

	Consulta completa:
	
		Produto::where( function($query) { 
				$query -> where('id','>',1)->where('id','<',4);
			  })-> where(function($query) { 
				$query -> where('name','LG')->orWhere('name','Aplle');
                          })->get()

6 - ORDENAÇÃO

	>>> Produto::orderBy('name')->get()            (Recupera todos os produtos em ordem crescente = ASC) 

	>>> Produto::orderBy('name','desc')->get()      (Recupera todos os produtos em ordem decrescente = DESC) 

	>>> Produto::where('id','>',3)->orderBy('name','desc')->get()      (Recupera todos os produtos com 'id' maior que 3 em ordem decrescente = DESC) 
		
7 - COLLECTIONS

















